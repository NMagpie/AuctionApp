/* tslint:disable */
/* eslint-disable */
/**
 * AuctionApp.Presentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessTokenResponse
 */
export interface AccessTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof AccessTokenResponse
     */
    'tokenType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenResponse
     */
    'accessToken': string | null;
    /**
     * 
     * @type {number}
     * @memberof AccessTokenResponse
     */
    'expiresIn': number;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenResponse
     */
    'refreshToken': string | null;
}
/**
 * 
 * @export
 * @interface AddUserBalanceRequest
 */
export interface AddUserBalanceRequest {
    /**
     * 
     * @type {number}
     * @memberof AddUserBalanceRequest
     */
    'amount'?: number;
}
/**
 * 
 * @export
 * @interface BidDto
 */
export interface BidDto {
    /**
     * 
     * @type {number}
     * @memberof BidDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof BidDto
     */
    'productId': number;
    /**
     * 
     * @type {number}
     * @memberof BidDto
     */
    'userId'?: number;
    /**
     * 
     * @type {number}
     * @memberof BidDto
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof BidDto
     */
    'createTime': string;
    /**
     * 
     * @type {boolean}
     * @memberof BidDto
     */
    'isWon': boolean;
}
/**
 * 
 * @export
 * @interface CategoryDto
 */
export interface CategoryDto {
    /**
     * 
     * @type {number}
     * @memberof CategoryDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryDto
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateProductRequest
 */
export interface CreateProductRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateProductRequest
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProductRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProductRequest
     */
    'startTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProductRequest
     */
    'endTime'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateProductRequest
     */
    'initialPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateProductRequest
     */
    'category'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateProductReviewRequest
 */
export interface CreateProductReviewRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateProductReviewRequest
     */
    'productId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateProductReviewRequest
     */
    'reviewText'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateProductReviewRequest
     */
    'rating'?: number;
}
/**
 * 
 * @export
 * @interface CreateUserWatchlistRequest
 */
export interface CreateUserWatchlistRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateUserWatchlistRequest
     */
    'productId': number;
}
/**
 * 
 * @export
 * @interface CurrentUserDto
 */
export interface CurrentUserDto {
    /**
     * 
     * @type {number}
     * @memberof CurrentUserDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'userName': string | null;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'email': string | null;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'phoneNumber': string | null;
    /**
     * 
     * @type {number}
     * @memberof CurrentUserDto
     */
    'balance'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const EProductSearchPresets = {
    ComingSoon: 'ComingSoon',
    EndingSoon: 'EndingSoon',
    MostActive: 'MostActive',
    BidHigh: 'BidHigh',
    BidLow: 'BidLow'
} as const;

export type EProductSearchPresets = typeof EProductSearchPresets[keyof typeof EProductSearchPresets];


/**
 * 
 * @export
 * @interface ForgotPasswordRequest
 */
export interface ForgotPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordRequest
     */
    'email': string | null;
}
/**
 * 
 * @export
 * @interface HttpValidationProblemDetails
 */
export interface HttpValidationProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof HttpValidationProblemDetails
     */
    'errors'?: { [key: string]: Array<string>; } | null;
    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof HttpValidationProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface InfoRequest
 */
export interface InfoRequest {
    /**
     * 
     * @type {string}
     * @memberof InfoRequest
     */
    'newEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoRequest
     */
    'newPassword'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoRequest
     */
    'oldPassword'?: string | null;
}
/**
 * 
 * @export
 * @interface InfoResponse
 */
export interface InfoResponse {
    /**
     * 
     * @type {string}
     * @memberof InfoResponse
     */
    'email': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof InfoResponse
     */
    'isEmailConfirmed': boolean;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'twoFactorCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'twoFactorRecoveryCode'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductDto
 */
export interface ProductDto {
    /**
     * 
     * @type {number}
     * @memberof ProductDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'title': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductDto
     */
    'creatorId'?: number | null;
    /**
     * 
     * @type {UserDto}
     * @memberof ProductDto
     */
    'creator'?: UserDto;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'startTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'endTime'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductDto
     */
    'initialPrice'?: number | null;
    /**
     * 
     * @type {Array<BidDto>}
     * @memberof ProductDto
     */
    'bids'?: Array<BidDto> | null;
    /**
     * 
     * @type {CategoryDto}
     * @memberof ProductDto
     */
    'category'?: CategoryDto;
}
/**
 * 
 * @export
 * @interface ProductDtoPaginatedResult
 */
export interface ProductDtoPaginatedResult {
    /**
     * 
     * @type {number}
     * @memberof ProductDtoPaginatedResult
     */
    'pageIndex'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductDtoPaginatedResult
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductDtoPaginatedResult
     */
    'total'?: number;
    /**
     * 
     * @type {Array<ProductDto>}
     * @memberof ProductDtoPaginatedResult
     */
    'items'?: Array<ProductDto> | null;
}
/**
 * 
 * @export
 * @interface ProductReviewDto
 */
export interface ProductReviewDto {
    /**
     * 
     * @type {number}
     * @memberof ProductReviewDto
     */
    'id'?: number;
    /**
     * 
     * @type {UserDto}
     * @memberof ProductReviewDto
     */
    'user'?: UserDto;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewDto
     */
    'productId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewDto
     */
    'reviewText'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewDto
     */
    'rating': number;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewDto
     */
    'dateCreated': string;
}
/**
 * 
 * @export
 * @interface ProductReviewDtoPaginatedResult
 */
export interface ProductReviewDtoPaginatedResult {
    /**
     * 
     * @type {number}
     * @memberof ProductReviewDtoPaginatedResult
     */
    'pageIndex'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewDtoPaginatedResult
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewDtoPaginatedResult
     */
    'total'?: number;
    /**
     * 
     * @type {Array<ProductReviewDto>}
     * @memberof ProductReviewDtoPaginatedResult
     */
    'items'?: Array<ProductReviewDto> | null;
}
/**
 * 
 * @export
 * @interface RefreshRequest
 */
export interface RefreshRequest {
    /**
     * 
     * @type {string}
     * @memberof RefreshRequest
     */
    'refreshToken': string | null;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'email': string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password': string | null;
}
/**
 * 
 * @export
 * @interface ResendConfirmationEmailRequest
 */
export interface ResendConfirmationEmailRequest {
    /**
     * 
     * @type {string}
     * @memberof ResendConfirmationEmailRequest
     */
    'email': string | null;
}
/**
 * 
 * @export
 * @interface ResetPasswordRequest
 */
export interface ResetPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'email': string | null;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'resetCode': string | null;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'newPassword': string | null;
}
/**
 * 
 * @export
 * @interface TwoFactorRequest
 */
export interface TwoFactorRequest {
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorRequest
     */
    'enable'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof TwoFactorRequest
     */
    'twoFactorCode'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorRequest
     */
    'resetSharedKey'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorRequest
     */
    'resetRecoveryCodes'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorRequest
     */
    'forgetMachine'?: boolean;
}
/**
 * 
 * @export
 * @interface TwoFactorResponse
 */
export interface TwoFactorResponse {
    /**
     * 
     * @type {string}
     * @memberof TwoFactorResponse
     */
    'sharedKey': string | null;
    /**
     * 
     * @type {number}
     * @memberof TwoFactorResponse
     */
    'recoveryCodesLeft': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof TwoFactorResponse
     */
    'recoveryCodes'?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorResponse
     */
    'isTwoFactorEnabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorResponse
     */
    'isMachineRemembered': boolean;
}
/**
 * 
 * @export
 * @interface UpdateProductRequest
 */
export interface UpdateProductRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateProductRequest
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductRequest
     */
    'startTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductRequest
     */
    'endTime'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateProductRequest
     */
    'initialPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductRequest
     */
    'category'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateProductReviewRequest
 */
export interface UpdateProductReviewRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateProductReviewRequest
     */
    'reviewText'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateProductReviewRequest
     */
    'rating'?: number;
}
/**
 * 
 * @export
 * @interface UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'email'?: string | null;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'userName': string | null;
}
/**
 * 
 * @export
 * @interface UserWatchlistDto
 */
export interface UserWatchlistDto {
    /**
     * 
     * @type {number}
     * @memberof UserWatchlistDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserWatchlistDto
     */
    'userId': number;
    /**
     * 
     * @type {number}
     * @memberof UserWatchlistDto
     */
    'productId'?: number | null;
}

/**
 * BidsApi - axios parameter creator
 * @export
 */
export const BidsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBid: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBid', 'id', id)
            const localVarPath = `/Bids/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BidsApi - functional programming interface
 * @export
 */
export const BidsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BidsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBid(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BidDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBid(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BidsApi - factory interface
 * @export
 */
export const BidsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BidsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBid(id: number, options?: any): AxiosPromise<BidDto> {
            return localVarFp.getBid(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBid operation in BidsApi.
 * @export
 * @interface BidsApiGetBidRequest
 */
export interface BidsApiGetBidRequest {
    /**
     * 
     * @type {number}
     * @memberof BidsApiGetBid
     */
    readonly id: number
}

/**
 * BidsApi - object-oriented interface
 * @export
 * @class BidsApi
 * @extends {BaseAPI}
 */
export class BidsApi extends BaseAPI {
    /**
     * 
     * @param {BidsApiGetBidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BidsApi
     */
    public getBid(requestParameters: BidsApiGetBidRequest, options?: AxiosRequestConfig) {
        return BidsApiFp(this.configuration).getBid(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CurrentUserApi - axios parameter creator
 * @export
 */
export const CurrentUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddUserBalanceRequest} [addUserBalanceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserBalance: async (addUserBalanceRequest?: AddUserBalanceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Users/Me/add-balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addUserBalanceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Users/Me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Users/Me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (updateUserRequest?: UpdateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Users/Me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CurrentUserApi - functional programming interface
 * @export
 */
export const CurrentUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CurrentUserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddUserBalanceRequest} [addUserBalanceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserBalance(addUserBalanceRequest?: AddUserBalanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserBalance(addUserBalanceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(updateUserRequest?: UpdateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(updateUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CurrentUserApi - factory interface
 * @export
 */
export const CurrentUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CurrentUserApiFp(configuration)
    return {
        /**
         * 
         * @param {AddUserBalanceRequest} [addUserBalanceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserBalance(addUserBalanceRequest?: AddUserBalanceRequest, options?: any): AxiosPromise<void> {
            return localVarFp.addUserBalance(addUserBalanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(options?: any): AxiosPromise<void> {
            return localVarFp.deleteUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: any): AxiosPromise<CurrentUserDto> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(updateUserRequest?: UpdateUserRequest, options?: any): AxiosPromise<CurrentUserDto> {
            return localVarFp.updateUser(updateUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addUserBalance operation in CurrentUserApi.
 * @export
 * @interface CurrentUserApiAddUserBalanceRequest
 */
export interface CurrentUserApiAddUserBalanceRequest {
    /**
     * 
     * @type {AddUserBalanceRequest}
     * @memberof CurrentUserApiAddUserBalance
     */
    readonly addUserBalanceRequest?: AddUserBalanceRequest
}

/**
 * Request parameters for updateUser operation in CurrentUserApi.
 * @export
 * @interface CurrentUserApiUpdateUserRequest
 */
export interface CurrentUserApiUpdateUserRequest {
    /**
     * 
     * @type {UpdateUserRequest}
     * @memberof CurrentUserApiUpdateUser
     */
    readonly updateUserRequest?: UpdateUserRequest
}

/**
 * CurrentUserApi - object-oriented interface
 * @export
 * @class CurrentUserApi
 * @extends {BaseAPI}
 */
export class CurrentUserApi extends BaseAPI {
    /**
     * 
     * @param {CurrentUserApiAddUserBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApi
     */
    public addUserBalance(requestParameters: CurrentUserApiAddUserBalanceRequest = {}, options?: AxiosRequestConfig) {
        return CurrentUserApiFp(this.configuration).addUserBalance(requestParameters.addUserBalanceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApi
     */
    public deleteUser(options?: AxiosRequestConfig) {
        return CurrentUserApiFp(this.configuration).deleteUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApi
     */
    public getCurrentUser(options?: AxiosRequestConfig) {
        return CurrentUserApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CurrentUserApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApi
     */
    public updateUser(requestParameters: CurrentUserApiUpdateUserRequest = {}, options?: AxiosRequestConfig) {
        return CurrentUserApiFp(this.configuration).updateUser(requestParameters.updateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IdentityApi - axios parameter creator
 * @export
 */
export const IdentityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ForgotPasswordRequest} [forgotPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityForgotPasswordPost: async (forgotPasswordRequest?: ForgotPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Identity/forgotPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [useCookies] 
         * @param {boolean} [useSessionCookies] 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityLoginPost: async (useCookies?: boolean, useSessionCookies?: boolean, loginRequest?: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Identity/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (useCookies !== undefined) {
                localVarQueryParameter['useCookies'] = useCookies;
            }

            if (useSessionCookies !== undefined) {
                localVarQueryParameter['useSessionCookies'] = useSessionCookies;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TwoFactorRequest} [twoFactorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityManage2faPost: async (twoFactorRequest?: TwoFactorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Identity/manage/2fa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(twoFactorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityManageInfoGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Identity/manage/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InfoRequest} [infoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityManageInfoPost: async (infoRequest?: InfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Identity/manage/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(infoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefreshRequest} [refreshRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityRefreshPost: async (refreshRequest?: RefreshRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Identity/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityRegisterPost: async (registerRequest?: RegisterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Identity/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResendConfirmationEmailRequest} [resendConfirmationEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityResendConfirmationEmailPost: async (resendConfirmationEmailRequest?: ResendConfirmationEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Identity/resendConfirmationEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resendConfirmationEmailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordRequest} [resetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityResetPasswordPost: async (resetPasswordRequest?: ResetPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Identity/resetPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [code] 
         * @param {string} [changedEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapIdentityApiIdentityConfirmEmail: async (userId?: string, code?: string, changedEmail?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Identity/confirmEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (changedEmail !== undefined) {
                localVarQueryParameter['changedEmail'] = changedEmail;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdentityApi - functional programming interface
 * @export
 */
export const IdentityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdentityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordRequest} [forgotPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityForgotPasswordPost(forgotPasswordRequest?: ForgotPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityForgotPasswordPost(forgotPasswordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {boolean} [useCookies] 
         * @param {boolean} [useSessionCookies] 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityLoginPost(useCookies?: boolean, useSessionCookies?: boolean, loginRequest?: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityLoginPost(useCookies, useSessionCookies, loginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TwoFactorRequest} [twoFactorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityManage2faPost(twoFactorRequest?: TwoFactorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TwoFactorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityManage2faPost(twoFactorRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityManageInfoGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityManageInfoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InfoRequest} [infoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityManageInfoPost(infoRequest?: InfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityManageInfoPost(infoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RefreshRequest} [refreshRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityRefreshPost(refreshRequest?: RefreshRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityRefreshPost(refreshRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityRegisterPost(registerRequest?: RegisterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityRegisterPost(registerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResendConfirmationEmailRequest} [resendConfirmationEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityResendConfirmationEmailPost(resendConfirmationEmailRequest?: ResendConfirmationEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityResendConfirmationEmailPost(resendConfirmationEmailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResetPasswordRequest} [resetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityResetPasswordPost(resetPasswordRequest?: ResetPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityResetPasswordPost(resetPasswordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [code] 
         * @param {string} [changedEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mapIdentityApiIdentityConfirmEmail(userId?: string, code?: string, changedEmail?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mapIdentityApiIdentityConfirmEmail(userId, code, changedEmail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IdentityApi - factory interface
 * @export
 */
export const IdentityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdentityApiFp(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordRequest} [forgotPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityForgotPasswordPost(forgotPasswordRequest?: ForgotPasswordRequest, options?: any): AxiosPromise<void> {
            return localVarFp.identityForgotPasswordPost(forgotPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [useCookies] 
         * @param {boolean} [useSessionCookies] 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityLoginPost(useCookies?: boolean, useSessionCookies?: boolean, loginRequest?: LoginRequest, options?: any): AxiosPromise<AccessTokenResponse> {
            return localVarFp.identityLoginPost(useCookies, useSessionCookies, loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TwoFactorRequest} [twoFactorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityManage2faPost(twoFactorRequest?: TwoFactorRequest, options?: any): AxiosPromise<TwoFactorResponse> {
            return localVarFp.identityManage2faPost(twoFactorRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityManageInfoGet(options?: any): AxiosPromise<InfoResponse> {
            return localVarFp.identityManageInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InfoRequest} [infoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityManageInfoPost(infoRequest?: InfoRequest, options?: any): AxiosPromise<InfoResponse> {
            return localVarFp.identityManageInfoPost(infoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RefreshRequest} [refreshRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityRefreshPost(refreshRequest?: RefreshRequest, options?: any): AxiosPromise<AccessTokenResponse> {
            return localVarFp.identityRefreshPost(refreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityRegisterPost(registerRequest?: RegisterRequest, options?: any): AxiosPromise<void> {
            return localVarFp.identityRegisterPost(registerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResendConfirmationEmailRequest} [resendConfirmationEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityResendConfirmationEmailPost(resendConfirmationEmailRequest?: ResendConfirmationEmailRequest, options?: any): AxiosPromise<void> {
            return localVarFp.identityResendConfirmationEmailPost(resendConfirmationEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordRequest} [resetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityResetPasswordPost(resetPasswordRequest?: ResetPasswordRequest, options?: any): AxiosPromise<void> {
            return localVarFp.identityResetPasswordPost(resetPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [code] 
         * @param {string} [changedEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapIdentityApiIdentityConfirmEmail(userId?: string, code?: string, changedEmail?: string, options?: any): AxiosPromise<void> {
            return localVarFp.mapIdentityApiIdentityConfirmEmail(userId, code, changedEmail, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for identityForgotPasswordPost operation in IdentityApi.
 * @export
 * @interface IdentityApiIdentityForgotPasswordPostRequest
 */
export interface IdentityApiIdentityForgotPasswordPostRequest {
    /**
     * 
     * @type {ForgotPasswordRequest}
     * @memberof IdentityApiIdentityForgotPasswordPost
     */
    readonly forgotPasswordRequest?: ForgotPasswordRequest
}

/**
 * Request parameters for identityLoginPost operation in IdentityApi.
 * @export
 * @interface IdentityApiIdentityLoginPostRequest
 */
export interface IdentityApiIdentityLoginPostRequest {
    /**
     * 
     * @type {boolean}
     * @memberof IdentityApiIdentityLoginPost
     */
    readonly useCookies?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof IdentityApiIdentityLoginPost
     */
    readonly useSessionCookies?: boolean

    /**
     * 
     * @type {LoginRequest}
     * @memberof IdentityApiIdentityLoginPost
     */
    readonly loginRequest?: LoginRequest
}

/**
 * Request parameters for identityManage2faPost operation in IdentityApi.
 * @export
 * @interface IdentityApiIdentityManage2faPostRequest
 */
export interface IdentityApiIdentityManage2faPostRequest {
    /**
     * 
     * @type {TwoFactorRequest}
     * @memberof IdentityApiIdentityManage2faPost
     */
    readonly twoFactorRequest?: TwoFactorRequest
}

/**
 * Request parameters for identityManageInfoPost operation in IdentityApi.
 * @export
 * @interface IdentityApiIdentityManageInfoPostRequest
 */
export interface IdentityApiIdentityManageInfoPostRequest {
    /**
     * 
     * @type {InfoRequest}
     * @memberof IdentityApiIdentityManageInfoPost
     */
    readonly infoRequest?: InfoRequest
}

/**
 * Request parameters for identityRefreshPost operation in IdentityApi.
 * @export
 * @interface IdentityApiIdentityRefreshPostRequest
 */
export interface IdentityApiIdentityRefreshPostRequest {
    /**
     * 
     * @type {RefreshRequest}
     * @memberof IdentityApiIdentityRefreshPost
     */
    readonly refreshRequest?: RefreshRequest
}

/**
 * Request parameters for identityRegisterPost operation in IdentityApi.
 * @export
 * @interface IdentityApiIdentityRegisterPostRequest
 */
export interface IdentityApiIdentityRegisterPostRequest {
    /**
     * 
     * @type {RegisterRequest}
     * @memberof IdentityApiIdentityRegisterPost
     */
    readonly registerRequest?: RegisterRequest
}

/**
 * Request parameters for identityResendConfirmationEmailPost operation in IdentityApi.
 * @export
 * @interface IdentityApiIdentityResendConfirmationEmailPostRequest
 */
export interface IdentityApiIdentityResendConfirmationEmailPostRequest {
    /**
     * 
     * @type {ResendConfirmationEmailRequest}
     * @memberof IdentityApiIdentityResendConfirmationEmailPost
     */
    readonly resendConfirmationEmailRequest?: ResendConfirmationEmailRequest
}

/**
 * Request parameters for identityResetPasswordPost operation in IdentityApi.
 * @export
 * @interface IdentityApiIdentityResetPasswordPostRequest
 */
export interface IdentityApiIdentityResetPasswordPostRequest {
    /**
     * 
     * @type {ResetPasswordRequest}
     * @memberof IdentityApiIdentityResetPasswordPost
     */
    readonly resetPasswordRequest?: ResetPasswordRequest
}

/**
 * Request parameters for mapIdentityApiIdentityConfirmEmail operation in IdentityApi.
 * @export
 * @interface IdentityApiMapIdentityApiIdentityConfirmEmailRequest
 */
export interface IdentityApiMapIdentityApiIdentityConfirmEmailRequest {
    /**
     * 
     * @type {string}
     * @memberof IdentityApiMapIdentityApiIdentityConfirmEmail
     */
    readonly userId?: string

    /**
     * 
     * @type {string}
     * @memberof IdentityApiMapIdentityApiIdentityConfirmEmail
     */
    readonly code?: string

    /**
     * 
     * @type {string}
     * @memberof IdentityApiMapIdentityApiIdentityConfirmEmail
     */
    readonly changedEmail?: string
}

/**
 * IdentityApi - object-oriented interface
 * @export
 * @class IdentityApi
 * @extends {BaseAPI}
 */
export class IdentityApi extends BaseAPI {
    /**
     * 
     * @param {IdentityApiIdentityForgotPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityForgotPasswordPost(requestParameters: IdentityApiIdentityForgotPasswordPostRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).identityForgotPasswordPost(requestParameters.forgotPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentityApiIdentityLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityLoginPost(requestParameters: IdentityApiIdentityLoginPostRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).identityLoginPost(requestParameters.useCookies, requestParameters.useSessionCookies, requestParameters.loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentityApiIdentityManage2faPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityManage2faPost(requestParameters: IdentityApiIdentityManage2faPostRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).identityManage2faPost(requestParameters.twoFactorRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityManageInfoGet(options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).identityManageInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentityApiIdentityManageInfoPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityManageInfoPost(requestParameters: IdentityApiIdentityManageInfoPostRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).identityManageInfoPost(requestParameters.infoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentityApiIdentityRefreshPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityRefreshPost(requestParameters: IdentityApiIdentityRefreshPostRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).identityRefreshPost(requestParameters.refreshRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentityApiIdentityRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityRegisterPost(requestParameters: IdentityApiIdentityRegisterPostRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).identityRegisterPost(requestParameters.registerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentityApiIdentityResendConfirmationEmailPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityResendConfirmationEmailPost(requestParameters: IdentityApiIdentityResendConfirmationEmailPostRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).identityResendConfirmationEmailPost(requestParameters.resendConfirmationEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentityApiIdentityResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityResetPasswordPost(requestParameters: IdentityApiIdentityResetPasswordPostRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).identityResetPasswordPost(requestParameters.resetPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentityApiMapIdentityApiIdentityConfirmEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public mapIdentityApiIdentityConfirmEmail(requestParameters: IdentityApiMapIdentityApiIdentityConfirmEmailRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).mapIdentityApiIdentityConfirmEmail(requestParameters.userId, requestParameters.code, requestParameters.changedEmail, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductReviewsApi - axios parameter creator
 * @export
 */
export const ProductReviewsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateProductReviewRequest} [createProductReviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductReview: async (createProductReviewRequest?: CreateProductReviewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProductReviews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductReview: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProductReview', 'id', id)
            const localVarPath = `/ProductReviews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {number} [pageIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPagedReviews: async (productId?: number, pageIndex?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProductReviews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductReview: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductReview', 'id', id)
            const localVarPath = `/ProductReviews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateProductReviewRequest} [updateProductReviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductReview: async (id: number, updateProductReviewRequest?: UpdateProductReviewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateProductReview', 'id', id)
            const localVarPath = `/ProductReviews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductReviewsApi - functional programming interface
 * @export
 */
export const ProductReviewsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductReviewsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateProductReviewRequest} [createProductReviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProductReview(createProductReviewRequest?: CreateProductReviewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductReviewDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProductReview(createProductReviewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductReview(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductReview(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {number} [pageIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPagedReviews(productId?: number, pageIndex?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductReviewDtoPaginatedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPagedReviews(productId, pageIndex, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductReview(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductReviewDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductReview(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateProductReviewRequest} [updateProductReviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProductReview(id: number, updateProductReviewRequest?: UpdateProductReviewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductReviewDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProductReview(id, updateProductReviewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductReviewsApi - factory interface
 * @export
 */
export const ProductReviewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductReviewsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateProductReviewRequest} [createProductReviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductReview(createProductReviewRequest?: CreateProductReviewRequest, options?: any): AxiosPromise<ProductReviewDto> {
            return localVarFp.createProductReview(createProductReviewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductReview(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteProductReview(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {number} [pageIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPagedReviews(productId?: number, pageIndex?: number, options?: any): AxiosPromise<ProductReviewDtoPaginatedResult> {
            return localVarFp.getPagedReviews(productId, pageIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductReview(id: number, options?: any): AxiosPromise<ProductReviewDto> {
            return localVarFp.getProductReview(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateProductReviewRequest} [updateProductReviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductReview(id: number, updateProductReviewRequest?: UpdateProductReviewRequest, options?: any): AxiosPromise<ProductReviewDto> {
            return localVarFp.updateProductReview(id, updateProductReviewRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createProductReview operation in ProductReviewsApi.
 * @export
 * @interface ProductReviewsApiCreateProductReviewRequest
 */
export interface ProductReviewsApiCreateProductReviewRequest {
    /**
     * 
     * @type {CreateProductReviewRequest}
     * @memberof ProductReviewsApiCreateProductReview
     */
    readonly createProductReviewRequest?: CreateProductReviewRequest
}

/**
 * Request parameters for deleteProductReview operation in ProductReviewsApi.
 * @export
 * @interface ProductReviewsApiDeleteProductReviewRequest
 */
export interface ProductReviewsApiDeleteProductReviewRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductReviewsApiDeleteProductReview
     */
    readonly id: number
}

/**
 * Request parameters for getPagedReviews operation in ProductReviewsApi.
 * @export
 * @interface ProductReviewsApiGetPagedReviewsRequest
 */
export interface ProductReviewsApiGetPagedReviewsRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductReviewsApiGetPagedReviews
     */
    readonly productId?: number

    /**
     * 
     * @type {number}
     * @memberof ProductReviewsApiGetPagedReviews
     */
    readonly pageIndex?: number
}

/**
 * Request parameters for getProductReview operation in ProductReviewsApi.
 * @export
 * @interface ProductReviewsApiGetProductReviewRequest
 */
export interface ProductReviewsApiGetProductReviewRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductReviewsApiGetProductReview
     */
    readonly id: number
}

/**
 * Request parameters for updateProductReview operation in ProductReviewsApi.
 * @export
 * @interface ProductReviewsApiUpdateProductReviewRequest
 */
export interface ProductReviewsApiUpdateProductReviewRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductReviewsApiUpdateProductReview
     */
    readonly id: number

    /**
     * 
     * @type {UpdateProductReviewRequest}
     * @memberof ProductReviewsApiUpdateProductReview
     */
    readonly updateProductReviewRequest?: UpdateProductReviewRequest
}

/**
 * ProductReviewsApi - object-oriented interface
 * @export
 * @class ProductReviewsApi
 * @extends {BaseAPI}
 */
export class ProductReviewsApi extends BaseAPI {
    /**
     * 
     * @param {ProductReviewsApiCreateProductReviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductReviewsApi
     */
    public createProductReview(requestParameters: ProductReviewsApiCreateProductReviewRequest = {}, options?: AxiosRequestConfig) {
        return ProductReviewsApiFp(this.configuration).createProductReview(requestParameters.createProductReviewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductReviewsApiDeleteProductReviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductReviewsApi
     */
    public deleteProductReview(requestParameters: ProductReviewsApiDeleteProductReviewRequest, options?: AxiosRequestConfig) {
        return ProductReviewsApiFp(this.configuration).deleteProductReview(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductReviewsApiGetPagedReviewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductReviewsApi
     */
    public getPagedReviews(requestParameters: ProductReviewsApiGetPagedReviewsRequest = {}, options?: AxiosRequestConfig) {
        return ProductReviewsApiFp(this.configuration).getPagedReviews(requestParameters.productId, requestParameters.pageIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductReviewsApiGetProductReviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductReviewsApi
     */
    public getProductReview(requestParameters: ProductReviewsApiGetProductReviewRequest, options?: AxiosRequestConfig) {
        return ProductReviewsApiFp(this.configuration).getProductReview(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductReviewsApiUpdateProductReviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductReviewsApi
     */
    public updateProductReview(requestParameters: ProductReviewsApiUpdateProductReviewRequest, options?: AxiosRequestConfig) {
        return ProductReviewsApiFp(this.configuration).updateProductReview(requestParameters.id, requestParameters.updateProductReviewRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateProductRequest} [createProductRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: async (createProductRequest?: CreateProductRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProduct', 'id', id)
            const localVarPath = `/Products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProduct', 'id', id)
            const localVarPath = `/Products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [searchQuery] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [category] 
         * @param {EProductSearchPresets} [searchPreset] 
         * @param {number} [maxPrice] 
         * @param {number} [minPrice] 
         * @param {string} [columnNameForSorting] 
         * @param {string} [sortDirection] 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchProducts: async (searchQuery?: string, pageIndex?: number, pageSize?: number, category?: string, searchPreset?: EProductSearchPresets, maxPrice?: number, minPrice?: number, columnNameForSorting?: string, sortDirection?: string, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchQuery !== undefined) {
                localVarQueryParameter['SearchQuery'] = searchQuery;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (category !== undefined) {
                localVarQueryParameter['Category'] = category;
            }

            if (searchPreset !== undefined) {
                localVarQueryParameter['SearchPreset'] = searchPreset;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['MaxPrice'] = maxPrice;
            }

            if (minPrice !== undefined) {
                localVarQueryParameter['MinPrice'] = minPrice;
            }

            if (columnNameForSorting !== undefined) {
                localVarQueryParameter['ColumnNameForSorting'] = columnNameForSorting;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateProductRequest} [updateProductRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: async (id: number, updateProductRequest?: UpdateProductRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateProduct', 'id', id)
            const localVarPath = `/Products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateProductRequest} [createProductRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProduct(createProductRequest?: CreateProductRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProduct(createProductRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProduct(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProduct(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProduct(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [searchQuery] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [category] 
         * @param {EProductSearchPresets} [searchPreset] 
         * @param {number} [maxPrice] 
         * @param {number} [minPrice] 
         * @param {string} [columnNameForSorting] 
         * @param {string} [sortDirection] 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchProducts(searchQuery?: string, pageIndex?: number, pageSize?: number, category?: string, searchPreset?: EProductSearchPresets, maxPrice?: number, minPrice?: number, columnNameForSorting?: string, sortDirection?: string, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDtoPaginatedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchProducts(searchQuery, pageIndex, pageSize, category, searchPreset, maxPrice, minPrice, columnNameForSorting, sortDirection, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateProductRequest} [updateProductRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProduct(id: number, updateProductRequest?: UpdateProductRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProduct(id, updateProductRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateProductRequest} [createProductRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct(createProductRequest?: CreateProductRequest, options?: any): AxiosPromise<ProductDto> {
            return localVarFp.createProduct(createProductRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteProduct(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct(id: number, options?: any): AxiosPromise<ProductDto> {
            return localVarFp.getProduct(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [searchQuery] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [category] 
         * @param {EProductSearchPresets} [searchPreset] 
         * @param {number} [maxPrice] 
         * @param {number} [minPrice] 
         * @param {string} [columnNameForSorting] 
         * @param {string} [sortDirection] 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchProducts(searchQuery?: string, pageIndex?: number, pageSize?: number, category?: string, searchPreset?: EProductSearchPresets, maxPrice?: number, minPrice?: number, columnNameForSorting?: string, sortDirection?: string, userId?: number, options?: any): AxiosPromise<ProductDtoPaginatedResult> {
            return localVarFp.searchProducts(searchQuery, pageIndex, pageSize, category, searchPreset, maxPrice, minPrice, columnNameForSorting, sortDirection, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateProductRequest} [updateProductRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(id: number, updateProductRequest?: UpdateProductRequest, options?: any): AxiosPromise<ProductDto> {
            return localVarFp.updateProduct(id, updateProductRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiCreateProductRequest
 */
export interface ProductsApiCreateProductRequest {
    /**
     * 
     * @type {CreateProductRequest}
     * @memberof ProductsApiCreateProduct
     */
    readonly createProductRequest?: CreateProductRequest
}

/**
 * Request parameters for deleteProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiDeleteProductRequest
 */
export interface ProductsApiDeleteProductRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductsApiDeleteProduct
     */
    readonly id: number
}

/**
 * Request parameters for getProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductRequest
 */
export interface ProductsApiGetProductRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductsApiGetProduct
     */
    readonly id: number
}

/**
 * Request parameters for searchProducts operation in ProductsApi.
 * @export
 * @interface ProductsApiSearchProductsRequest
 */
export interface ProductsApiSearchProductsRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductsApiSearchProducts
     */
    readonly searchQuery?: string

    /**
     * 
     * @type {number}
     * @memberof ProductsApiSearchProducts
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof ProductsApiSearchProducts
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof ProductsApiSearchProducts
     */
    readonly category?: string

    /**
     * 
     * @type {EProductSearchPresets}
     * @memberof ProductsApiSearchProducts
     */
    readonly searchPreset?: EProductSearchPresets

    /**
     * 
     * @type {number}
     * @memberof ProductsApiSearchProducts
     */
    readonly maxPrice?: number

    /**
     * 
     * @type {number}
     * @memberof ProductsApiSearchProducts
     */
    readonly minPrice?: number

    /**
     * 
     * @type {string}
     * @memberof ProductsApiSearchProducts
     */
    readonly columnNameForSorting?: string

    /**
     * 
     * @type {string}
     * @memberof ProductsApiSearchProducts
     */
    readonly sortDirection?: string

    /**
     * 
     * @type {number}
     * @memberof ProductsApiSearchProducts
     */
    readonly userId?: number
}

/**
 * Request parameters for updateProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiUpdateProductRequest
 */
export interface ProductsApiUpdateProductRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductsApiUpdateProduct
     */
    readonly id: number

    /**
     * 
     * @type {UpdateProductRequest}
     * @memberof ProductsApiUpdateProduct
     */
    readonly updateProductRequest?: UpdateProductRequest
}

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * 
     * @param {ProductsApiCreateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public createProduct(requestParameters: ProductsApiCreateProductRequest = {}, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).createProduct(requestParameters.createProductRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductsApiDeleteProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public deleteProduct(requestParameters: ProductsApiDeleteProductRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).deleteProduct(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductsApiGetProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProduct(requestParameters: ProductsApiGetProductRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getProduct(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductsApiSearchProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public searchProducts(requestParameters: ProductsApiSearchProductsRequest = {}, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).searchProducts(requestParameters.searchQuery, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.category, requestParameters.searchPreset, requestParameters.maxPrice, requestParameters.minPrice, requestParameters.columnNameForSorting, requestParameters.sortDirection, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductsApiUpdateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public updateProduct(requestParameters: ProductsApiUpdateProductRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).updateProduct(requestParameters.id, requestParameters.updateProductRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserWatchlistsApi - axios parameter creator
 * @export
 */
export const UserWatchlistsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUserWatchlistRequest} [createUserWatchlistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserWatchlist: async (createUserWatchlistRequest?: CreateUserWatchlistRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/UserWatchlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserWatchlistRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserWatchlist: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUserWatchlist', 'id', id)
            const localVarPath = `/UserWatchlists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserWatchlistByProductId: async (productId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/UserWatchlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        existsUserWatchlistByProductId: async (productId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/UserWatchlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWatchlist: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserWatchlist', 'id', id)
            const localVarPath = `/UserWatchlists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserWatchlistsApi - functional programming interface
 * @export
 */
export const UserWatchlistsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserWatchlistsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUserWatchlistRequest} [createUserWatchlistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserWatchlist(createUserWatchlistRequest?: CreateUserWatchlistRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserWatchlistDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserWatchlist(createUserWatchlistRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserWatchlist(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserWatchlist(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserWatchlistByProductId(productId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserWatchlistDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserWatchlistByProductId(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async existsUserWatchlistByProductId(productId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserWatchlistDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.existsUserWatchlistByProductId(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserWatchlist(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserWatchlistDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserWatchlist(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserWatchlistsApi - factory interface
 * @export
 */
export const UserWatchlistsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserWatchlistsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateUserWatchlistRequest} [createUserWatchlistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserWatchlist(createUserWatchlistRequest?: CreateUserWatchlistRequest, options?: any): AxiosPromise<UserWatchlistDto> {
            return localVarFp.createUserWatchlist(createUserWatchlistRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserWatchlist(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUserWatchlist(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserWatchlistByProductId(productId?: number, options?: any): AxiosPromise<UserWatchlistDto> {
            return localVarFp.deleteUserWatchlistByProductId(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        existsUserWatchlistByProductId(productId?: number, options?: any): AxiosPromise<UserWatchlistDto> {
            return localVarFp.existsUserWatchlistByProductId(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWatchlist(id: number, options?: any): AxiosPromise<UserWatchlistDto> {
            return localVarFp.getUserWatchlist(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createUserWatchlist operation in UserWatchlistsApi.
 * @export
 * @interface UserWatchlistsApiCreateUserWatchlistRequest
 */
export interface UserWatchlistsApiCreateUserWatchlistRequest {
    /**
     * 
     * @type {CreateUserWatchlistRequest}
     * @memberof UserWatchlistsApiCreateUserWatchlist
     */
    readonly createUserWatchlistRequest?: CreateUserWatchlistRequest
}

/**
 * Request parameters for deleteUserWatchlist operation in UserWatchlistsApi.
 * @export
 * @interface UserWatchlistsApiDeleteUserWatchlistRequest
 */
export interface UserWatchlistsApiDeleteUserWatchlistRequest {
    /**
     * 
     * @type {number}
     * @memberof UserWatchlistsApiDeleteUserWatchlist
     */
    readonly id: number
}

/**
 * Request parameters for deleteUserWatchlistByProductId operation in UserWatchlistsApi.
 * @export
 * @interface UserWatchlistsApiDeleteUserWatchlistByProductIdRequest
 */
export interface UserWatchlistsApiDeleteUserWatchlistByProductIdRequest {
    /**
     * 
     * @type {number}
     * @memberof UserWatchlistsApiDeleteUserWatchlistByProductId
     */
    readonly productId?: number
}

/**
 * Request parameters for existsUserWatchlistByProductId operation in UserWatchlistsApi.
 * @export
 * @interface UserWatchlistsApiExistsUserWatchlistByProductIdRequest
 */
export interface UserWatchlistsApiExistsUserWatchlistByProductIdRequest {
    /**
     * 
     * @type {number}
     * @memberof UserWatchlistsApiExistsUserWatchlistByProductId
     */
    readonly productId?: number
}

/**
 * Request parameters for getUserWatchlist operation in UserWatchlistsApi.
 * @export
 * @interface UserWatchlistsApiGetUserWatchlistRequest
 */
export interface UserWatchlistsApiGetUserWatchlistRequest {
    /**
     * 
     * @type {number}
     * @memberof UserWatchlistsApiGetUserWatchlist
     */
    readonly id: number
}

/**
 * UserWatchlistsApi - object-oriented interface
 * @export
 * @class UserWatchlistsApi
 * @extends {BaseAPI}
 */
export class UserWatchlistsApi extends BaseAPI {
    /**
     * 
     * @param {UserWatchlistsApiCreateUserWatchlistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserWatchlistsApi
     */
    public createUserWatchlist(requestParameters: UserWatchlistsApiCreateUserWatchlistRequest = {}, options?: AxiosRequestConfig) {
        return UserWatchlistsApiFp(this.configuration).createUserWatchlist(requestParameters.createUserWatchlistRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserWatchlistsApiDeleteUserWatchlistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserWatchlistsApi
     */
    public deleteUserWatchlist(requestParameters: UserWatchlistsApiDeleteUserWatchlistRequest, options?: AxiosRequestConfig) {
        return UserWatchlistsApiFp(this.configuration).deleteUserWatchlist(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserWatchlistsApiDeleteUserWatchlistByProductIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserWatchlistsApi
     */
    public deleteUserWatchlistByProductId(requestParameters: UserWatchlistsApiDeleteUserWatchlistByProductIdRequest = {}, options?: AxiosRequestConfig) {
        return UserWatchlistsApiFp(this.configuration).deleteUserWatchlistByProductId(requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserWatchlistsApiExistsUserWatchlistByProductIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserWatchlistsApi
     */
    public existsUserWatchlistByProductId(requestParameters: UserWatchlistsApiExistsUserWatchlistByProductIdRequest = {}, options?: AxiosRequestConfig) {
        return UserWatchlistsApiFp(this.configuration).existsUserWatchlistByProductId(requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserWatchlistsApiGetUserWatchlistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserWatchlistsApi
     */
    public getUserWatchlist(requestParameters: UserWatchlistsApiGetUserWatchlistRequest, options?: AxiosRequestConfig) {
        return UserWatchlistsApiFp(this.configuration).getUserWatchlist(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUser', 'id', id)
            const localVarPath = `/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: number, options?: any): AxiosPromise<UserDto> {
            return localVarFp.getUser(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUser operation in UsersApi.
 * @export
 * @interface UsersApiGetUserRequest
 */
export interface UsersApiGetUserRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiGetUser
     */
    readonly id: number
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {UsersApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(requestParameters: UsersApiGetUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}


