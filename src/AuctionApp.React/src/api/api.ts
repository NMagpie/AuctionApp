/* tslint:disable */
/* eslint-disable */
/**
 * AuctionApp.Presentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessTokenResponse
 */
export interface AccessTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof AccessTokenResponse
     */
    'tokenType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenResponse
     */
    'accessToken'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AccessTokenResponse
     */
    'expiresIn'?: number;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenResponse
     */
    'refreshToken'?: string | null;
}
/**
 * 
 * @export
 * @interface AddUserBalanceRequest
 */
export interface AddUserBalanceRequest {
    /**
     * 
     * @type {number}
     * @memberof AddUserBalanceRequest
     */
    'amount'?: number;
}
/**
 * 
 * @export
 * @interface AuctionDto
 */
export interface AuctionDto {
    /**
     * 
     * @type {number}
     * @memberof AuctionDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuctionDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AuctionDto
     */
    'creatorId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof AuctionDto
     */
    'startTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuctionDto
     */
    'endTime'?: string | null;
    /**
     * 
     * @type {Set<number>}
     * @memberof AuctionDto
     */
    'lotIds'?: Set<number> | null;
}
/**
 * 
 * @export
 * @interface AuctionReviewDto
 */
export interface AuctionReviewDto {
    /**
     * 
     * @type {number}
     * @memberof AuctionReviewDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuctionReviewDto
     */
    'userId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof AuctionReviewDto
     */
    'auctionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuctionReviewDto
     */
    'reviewText'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AuctionReviewDto
     */
    'rating'?: number;
}
/**
 * 
 * @export
 * @interface BidDto
 */
export interface BidDto {
    /**
     * 
     * @type {number}
     * @memberof BidDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof BidDto
     */
    'lotId'?: number;
    /**
     * 
     * @type {number}
     * @memberof BidDto
     */
    'userId'?: number;
    /**
     * 
     * @type {number}
     * @memberof BidDto
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof BidDto
     */
    'createTime'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BidDto
     */
    'isWon'?: boolean;
}
/**
 * 
 * @export
 * @interface CategoryDto
 */
export interface CategoryDto {
    /**
     * 
     * @type {number}
     * @memberof CategoryDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryDto
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface CategoryInLotDto
 */
export interface CategoryInLotDto {
    /**
     * 
     * @type {string}
     * @memberof CategoryInLotDto
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateAuctionRequest
 */
export interface CreateAuctionRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateAuctionRequest
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateAuctionRequest
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAuctionRequest
     */
    'endTime'?: string;
    /**
     * 
     * @type {Array<LotInAuctionDto>}
     * @memberof CreateAuctionRequest
     */
    'lots'?: Array<LotInAuctionDto> | null;
}
/**
 * 
 * @export
 * @interface CreateAuctionReviewRequest
 */
export interface CreateAuctionReviewRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateAuctionReviewRequest
     */
    'auctionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateAuctionReviewRequest
     */
    'reviewText'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateAuctionReviewRequest
     */
    'rating'?: number;
}
/**
 * 
 * @export
 * @interface CreateBidCommand
 */
export interface CreateBidCommand {
    /**
     * 
     * @type {number}
     * @memberof CreateBidCommand
     */
    'lotId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateBidCommand
     */
    'userId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateBidCommand
     */
    'amount'?: number;
}
/**
 * 
 * @export
 * @interface CreateLotRequest
 */
export interface CreateLotRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateLotRequest
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateLotRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateLotRequest
     */
    'auctionId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateLotRequest
     */
    'initialPrice'?: number;
    /**
     * 
     * @type {Set<string>}
     * @memberof CreateLotRequest
     */
    'categories'?: Set<string> | null;
}
/**
 * 
 * @export
 * @interface CreateUserWatchlistCommand
 */
export interface CreateUserWatchlistCommand {
    /**
     * 
     * @type {number}
     * @memberof CreateUserWatchlistCommand
     */
    'userId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateUserWatchlistCommand
     */
    'auctionId'?: number;
}
/**
 * 
 * @export
 * @interface ForgotPasswordRequest
 */
export interface ForgotPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordRequest
     */
    'email'?: string | null;
}
/**
 * 
 * @export
 * @interface HttpValidationProblemDetails
 */
export interface HttpValidationProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof HttpValidationProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'instance'?: string | null;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof HttpValidationProblemDetails
     */
    'errors'?: { [key: string]: Array<string>; } | null;
}
/**
 * 
 * @export
 * @interface InfoRequest
 */
export interface InfoRequest {
    /**
     * 
     * @type {string}
     * @memberof InfoRequest
     */
    'newEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoRequest
     */
    'newPassword'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoRequest
     */
    'oldPassword'?: string | null;
}
/**
 * 
 * @export
 * @interface InfoResponse
 */
export interface InfoResponse {
    /**
     * 
     * @type {string}
     * @memberof InfoResponse
     */
    'email'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof InfoResponse
     */
    'isEmailConfirmed'?: boolean;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'twoFactorCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'twoFactorRecoveryCode'?: string | null;
}
/**
 * 
 * @export
 * @interface LotDto
 */
export interface LotDto {
    /**
     * 
     * @type {number}
     * @memberof LotDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LotDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LotDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LotDto
     */
    'auctionId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LotDto
     */
    'initialPrice'?: number | null;
    /**
     * 
     * @type {Set<number>}
     * @memberof LotDto
     */
    'bidIds'?: Set<number> | null;
    /**
     * 
     * @type {Set<CategoryDto>}
     * @memberof LotDto
     */
    'categories'?: Set<CategoryDto> | null;
}
/**
 * 
 * @export
 * @interface LotInAuctionDto
 */
export interface LotInAuctionDto {
    /**
     * 
     * @type {string}
     * @memberof LotInAuctionDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LotInAuctionDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LotInAuctionDto
     */
    'initialPrice'?: number;
    /**
     * 
     * @type {Set<CategoryInLotDto>}
     * @memberof LotInAuctionDto
     */
    'categories'?: Set<CategoryInLotDto> | null;
}
/**
 * 
 * @export
 * @interface RefreshRequest
 */
export interface RefreshRequest {
    /**
     * 
     * @type {string}
     * @memberof RefreshRequest
     */
    'refreshToken'?: string | null;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface ResendConfirmationEmailRequest
 */
export interface ResendConfirmationEmailRequest {
    /**
     * 
     * @type {string}
     * @memberof ResendConfirmationEmailRequest
     */
    'email'?: string | null;
}
/**
 * 
 * @export
 * @interface ResetPasswordRequest
 */
export interface ResetPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'resetCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'newPassword'?: string | null;
}
/**
 * 
 * @export
 * @interface TwoFactorRequest
 */
export interface TwoFactorRequest {
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorRequest
     */
    'enable'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof TwoFactorRequest
     */
    'twoFactorCode'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorRequest
     */
    'resetSharedKey'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorRequest
     */
    'resetRecoveryCodes'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorRequest
     */
    'forgetMachine'?: boolean;
}
/**
 * 
 * @export
 * @interface TwoFactorResponse
 */
export interface TwoFactorResponse {
    /**
     * 
     * @type {string}
     * @memberof TwoFactorResponse
     */
    'sharedKey'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TwoFactorResponse
     */
    'recoveryCodesLeft'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof TwoFactorResponse
     */
    'recoveryCodes'?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorResponse
     */
    'isTwoFactorEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorResponse
     */
    'isMachineRemembered'?: boolean;
}
/**
 * 
 * @export
 * @interface UpdateAuctionRequest
 */
export interface UpdateAuctionRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateAuctionRequest
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateAuctionRequest
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAuctionRequest
     */
    'endTime'?: string;
}
/**
 * 
 * @export
 * @interface UpdateAuctionReviewRequest
 */
export interface UpdateAuctionReviewRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateAuctionReviewRequest
     */
    'reviewText'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateAuctionReviewRequest
     */
    'rating'?: number;
}
/**
 * 
 * @export
 * @interface UpdateLotRequest
 */
export interface UpdateLotRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateLotRequest
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateLotRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateLotRequest
     */
    'initialPrice'?: number;
    /**
     * 
     * @type {Set<string>}
     * @memberof UpdateLotRequest
     */
    'categories'?: Set<string> | null;
}
/**
 * 
 * @export
 * @interface UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'userName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    'balance'?: number;
}
/**
 * 
 * @export
 * @interface UserWatchlistDto
 */
export interface UserWatchlistDto {
    /**
     * 
     * @type {number}
     * @memberof UserWatchlistDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserWatchlistDto
     */
    'userId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserWatchlistDto
     */
    'auctionId'?: number | null;
}

/**
 * AuctionReviewsApi - axios parameter creator
 * @export
 */
export const AuctionReviewsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionReviewsIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('auctionReviewsIdDelete', 'id', id)
            const localVarPath = `/AuctionReviews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionReviewsIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('auctionReviewsIdGet', 'id', id)
            const localVarPath = `/AuctionReviews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateAuctionReviewRequest} [updateAuctionReviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionReviewsIdPut: async (id: number, updateAuctionReviewRequest?: UpdateAuctionReviewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('auctionReviewsIdPut', 'id', id)
            const localVarPath = `/AuctionReviews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAuctionReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateAuctionReviewRequest} [createAuctionReviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionReviewsPost: async (createAuctionReviewRequest?: CreateAuctionReviewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/AuctionReviews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAuctionReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuctionReviewsApi - functional programming interface
 * @export
 */
export const AuctionReviewsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuctionReviewsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auctionReviewsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auctionReviewsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auctionReviewsIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuctionReviewDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auctionReviewsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateAuctionReviewRequest} [updateAuctionReviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auctionReviewsIdPut(id: number, updateAuctionReviewRequest?: UpdateAuctionReviewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuctionReviewDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auctionReviewsIdPut(id, updateAuctionReviewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateAuctionReviewRequest} [createAuctionReviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auctionReviewsPost(createAuctionReviewRequest?: CreateAuctionReviewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuctionReviewDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auctionReviewsPost(createAuctionReviewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuctionReviewsApi - factory interface
 * @export
 */
export const AuctionReviewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuctionReviewsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionReviewsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.auctionReviewsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionReviewsIdGet(id: number, options?: any): AxiosPromise<AuctionReviewDto> {
            return localVarFp.auctionReviewsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateAuctionReviewRequest} [updateAuctionReviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionReviewsIdPut(id: number, updateAuctionReviewRequest?: UpdateAuctionReviewRequest, options?: any): AxiosPromise<AuctionReviewDto> {
            return localVarFp.auctionReviewsIdPut(id, updateAuctionReviewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateAuctionReviewRequest} [createAuctionReviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionReviewsPost(createAuctionReviewRequest?: CreateAuctionReviewRequest, options?: any): AxiosPromise<AuctionReviewDto> {
            return localVarFp.auctionReviewsPost(createAuctionReviewRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for auctionReviewsIdDelete operation in AuctionReviewsApi.
 * @export
 * @interface AuctionReviewsApiAuctionReviewsIdDeleteRequest
 */
export interface AuctionReviewsApiAuctionReviewsIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof AuctionReviewsApiAuctionReviewsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for auctionReviewsIdGet operation in AuctionReviewsApi.
 * @export
 * @interface AuctionReviewsApiAuctionReviewsIdGetRequest
 */
export interface AuctionReviewsApiAuctionReviewsIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AuctionReviewsApiAuctionReviewsIdGet
     */
    readonly id: number
}

/**
 * Request parameters for auctionReviewsIdPut operation in AuctionReviewsApi.
 * @export
 * @interface AuctionReviewsApiAuctionReviewsIdPutRequest
 */
export interface AuctionReviewsApiAuctionReviewsIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof AuctionReviewsApiAuctionReviewsIdPut
     */
    readonly id: number

    /**
     * 
     * @type {UpdateAuctionReviewRequest}
     * @memberof AuctionReviewsApiAuctionReviewsIdPut
     */
    readonly updateAuctionReviewRequest?: UpdateAuctionReviewRequest
}

/**
 * Request parameters for auctionReviewsPost operation in AuctionReviewsApi.
 * @export
 * @interface AuctionReviewsApiAuctionReviewsPostRequest
 */
export interface AuctionReviewsApiAuctionReviewsPostRequest {
    /**
     * 
     * @type {CreateAuctionReviewRequest}
     * @memberof AuctionReviewsApiAuctionReviewsPost
     */
    readonly createAuctionReviewRequest?: CreateAuctionReviewRequest
}

/**
 * AuctionReviewsApi - object-oriented interface
 * @export
 * @class AuctionReviewsApi
 * @extends {BaseAPI}
 */
export class AuctionReviewsApi extends BaseAPI {
    /**
     * 
     * @param {AuctionReviewsApiAuctionReviewsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionReviewsApi
     */
    public auctionReviewsIdDelete(requestParameters: AuctionReviewsApiAuctionReviewsIdDeleteRequest, options?: AxiosRequestConfig) {
        return AuctionReviewsApiFp(this.configuration).auctionReviewsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuctionReviewsApiAuctionReviewsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionReviewsApi
     */
    public auctionReviewsIdGet(requestParameters: AuctionReviewsApiAuctionReviewsIdGetRequest, options?: AxiosRequestConfig) {
        return AuctionReviewsApiFp(this.configuration).auctionReviewsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuctionReviewsApiAuctionReviewsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionReviewsApi
     */
    public auctionReviewsIdPut(requestParameters: AuctionReviewsApiAuctionReviewsIdPutRequest, options?: AxiosRequestConfig) {
        return AuctionReviewsApiFp(this.configuration).auctionReviewsIdPut(requestParameters.id, requestParameters.updateAuctionReviewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuctionReviewsApiAuctionReviewsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionReviewsApi
     */
    public auctionReviewsPost(requestParameters: AuctionReviewsApiAuctionReviewsPostRequest = {}, options?: AxiosRequestConfig) {
        return AuctionReviewsApiFp(this.configuration).auctionReviewsPost(requestParameters.createAuctionReviewRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuctionsApi - axios parameter creator
 * @export
 */
export const AuctionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionsIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('auctionsIdDelete', 'id', id)
            const localVarPath = `/Auctions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionsIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('auctionsIdGet', 'id', id)
            const localVarPath = `/Auctions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateAuctionRequest} [updateAuctionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionsIdPut: async (id: number, updateAuctionRequest?: UpdateAuctionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('auctionsIdPut', 'id', id)
            const localVarPath = `/Auctions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAuctionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateAuctionRequest} [createAuctionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionsPost: async (createAuctionRequest?: CreateAuctionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Auctions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAuctionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuctionsApi - functional programming interface
 * @export
 */
export const AuctionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuctionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auctionsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auctionsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auctionsIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuctionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auctionsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateAuctionRequest} [updateAuctionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auctionsIdPut(id: number, updateAuctionRequest?: UpdateAuctionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuctionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auctionsIdPut(id, updateAuctionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateAuctionRequest} [createAuctionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auctionsPost(createAuctionRequest?: CreateAuctionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuctionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auctionsPost(createAuctionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuctionsApi - factory interface
 * @export
 */
export const AuctionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuctionsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.auctionsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionsIdGet(id: number, options?: any): AxiosPromise<AuctionDto> {
            return localVarFp.auctionsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateAuctionRequest} [updateAuctionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionsIdPut(id: number, updateAuctionRequest?: UpdateAuctionRequest, options?: any): AxiosPromise<AuctionDto> {
            return localVarFp.auctionsIdPut(id, updateAuctionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateAuctionRequest} [createAuctionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionsPost(createAuctionRequest?: CreateAuctionRequest, options?: any): AxiosPromise<AuctionDto> {
            return localVarFp.auctionsPost(createAuctionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for auctionsIdDelete operation in AuctionsApi.
 * @export
 * @interface AuctionsApiAuctionsIdDeleteRequest
 */
export interface AuctionsApiAuctionsIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof AuctionsApiAuctionsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for auctionsIdGet operation in AuctionsApi.
 * @export
 * @interface AuctionsApiAuctionsIdGetRequest
 */
export interface AuctionsApiAuctionsIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AuctionsApiAuctionsIdGet
     */
    readonly id: number
}

/**
 * Request parameters for auctionsIdPut operation in AuctionsApi.
 * @export
 * @interface AuctionsApiAuctionsIdPutRequest
 */
export interface AuctionsApiAuctionsIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof AuctionsApiAuctionsIdPut
     */
    readonly id: number

    /**
     * 
     * @type {UpdateAuctionRequest}
     * @memberof AuctionsApiAuctionsIdPut
     */
    readonly updateAuctionRequest?: UpdateAuctionRequest
}

/**
 * Request parameters for auctionsPost operation in AuctionsApi.
 * @export
 * @interface AuctionsApiAuctionsPostRequest
 */
export interface AuctionsApiAuctionsPostRequest {
    /**
     * 
     * @type {CreateAuctionRequest}
     * @memberof AuctionsApiAuctionsPost
     */
    readonly createAuctionRequest?: CreateAuctionRequest
}

/**
 * AuctionsApi - object-oriented interface
 * @export
 * @class AuctionsApi
 * @extends {BaseAPI}
 */
export class AuctionsApi extends BaseAPI {
    /**
     * 
     * @param {AuctionsApiAuctionsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionsApi
     */
    public auctionsIdDelete(requestParameters: AuctionsApiAuctionsIdDeleteRequest, options?: AxiosRequestConfig) {
        return AuctionsApiFp(this.configuration).auctionsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuctionsApiAuctionsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionsApi
     */
    public auctionsIdGet(requestParameters: AuctionsApiAuctionsIdGetRequest, options?: AxiosRequestConfig) {
        return AuctionsApiFp(this.configuration).auctionsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuctionsApiAuctionsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionsApi
     */
    public auctionsIdPut(requestParameters: AuctionsApiAuctionsIdPutRequest, options?: AxiosRequestConfig) {
        return AuctionsApiFp(this.configuration).auctionsIdPut(requestParameters.id, requestParameters.updateAuctionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuctionsApiAuctionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionsApi
     */
    public auctionsPost(requestParameters: AuctionsApiAuctionsPostRequest = {}, options?: AxiosRequestConfig) {
        return AuctionsApiFp(this.configuration).auctionsPost(requestParameters.createAuctionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BidsApi - axios parameter creator
 * @export
 */
export const BidsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bidsIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bidsIdDelete', 'id', id)
            const localVarPath = `/Bids/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bidsIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bidsIdGet', 'id', id)
            const localVarPath = `/Bids/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateBidCommand} [createBidCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bidsPost: async (createBidCommand?: CreateBidCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Bids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBidCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BidsApi - functional programming interface
 * @export
 */
export const BidsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BidsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bidsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bidsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bidsIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BidDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bidsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateBidCommand} [createBidCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bidsPost(createBidCommand?: CreateBidCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BidDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bidsPost(createBidCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BidsApi - factory interface
 * @export
 */
export const BidsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BidsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bidsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.bidsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bidsIdGet(id: number, options?: any): AxiosPromise<BidDto> {
            return localVarFp.bidsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateBidCommand} [createBidCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bidsPost(createBidCommand?: CreateBidCommand, options?: any): AxiosPromise<BidDto> {
            return localVarFp.bidsPost(createBidCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for bidsIdDelete operation in BidsApi.
 * @export
 * @interface BidsApiBidsIdDeleteRequest
 */
export interface BidsApiBidsIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof BidsApiBidsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for bidsIdGet operation in BidsApi.
 * @export
 * @interface BidsApiBidsIdGetRequest
 */
export interface BidsApiBidsIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof BidsApiBidsIdGet
     */
    readonly id: number
}

/**
 * Request parameters for bidsPost operation in BidsApi.
 * @export
 * @interface BidsApiBidsPostRequest
 */
export interface BidsApiBidsPostRequest {
    /**
     * 
     * @type {CreateBidCommand}
     * @memberof BidsApiBidsPost
     */
    readonly createBidCommand?: CreateBidCommand
}

/**
 * BidsApi - object-oriented interface
 * @export
 * @class BidsApi
 * @extends {BaseAPI}
 */
export class BidsApi extends BaseAPI {
    /**
     * 
     * @param {BidsApiBidsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BidsApi
     */
    public bidsIdDelete(requestParameters: BidsApiBidsIdDeleteRequest, options?: AxiosRequestConfig) {
        return BidsApiFp(this.configuration).bidsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BidsApiBidsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BidsApi
     */
    public bidsIdGet(requestParameters: BidsApiBidsIdGetRequest, options?: AxiosRequestConfig) {
        return BidsApiFp(this.configuration).bidsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BidsApiBidsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BidsApi
     */
    public bidsPost(requestParameters: BidsApiBidsPostRequest = {}, options?: AxiosRequestConfig) {
        return BidsApiFp(this.configuration).bidsPost(requestParameters.createBidCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IdentityApi - axios parameter creator
 * @export
 */
export const IdentityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ForgotPasswordRequest} [forgotPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityForgotPasswordPost: async (forgotPasswordRequest?: ForgotPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identity/forgotPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [useCookies] 
         * @param {boolean} [useSessionCookies] 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityLoginPost: async (useCookies?: boolean, useSessionCookies?: boolean, loginRequest?: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identity/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (useCookies !== undefined) {
                localVarQueryParameter['useCookies'] = useCookies;
            }

            if (useSessionCookies !== undefined) {
                localVarQueryParameter['useSessionCookies'] = useSessionCookies;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TwoFactorRequest} [twoFactorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityManage2faPost: async (twoFactorRequest?: TwoFactorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identity/manage/2fa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(twoFactorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityManageInfoGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identity/manage/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InfoRequest} [infoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityManageInfoPost: async (infoRequest?: InfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identity/manage/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(infoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefreshRequest} [refreshRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityRefreshPost: async (refreshRequest?: RefreshRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identity/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityRegisterPost: async (registerRequest?: RegisterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identity/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResendConfirmationEmailRequest} [resendConfirmationEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityResendConfirmationEmailPost: async (resendConfirmationEmailRequest?: ResendConfirmationEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identity/resendConfirmationEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resendConfirmationEmailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordRequest} [resetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityResetPasswordPost: async (resetPasswordRequest?: ResetPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identity/resetPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [code] 
         * @param {string} [changedEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapIdentityApiIdentityConfirmEmail: async (userId?: string, code?: string, changedEmail?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identity/confirmEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (changedEmail !== undefined) {
                localVarQueryParameter['changedEmail'] = changedEmail;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdentityApi - functional programming interface
 * @export
 */
export const IdentityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdentityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordRequest} [forgotPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityForgotPasswordPost(forgotPasswordRequest?: ForgotPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityForgotPasswordPost(forgotPasswordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {boolean} [useCookies] 
         * @param {boolean} [useSessionCookies] 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityLoginPost(useCookies?: boolean, useSessionCookies?: boolean, loginRequest?: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityLoginPost(useCookies, useSessionCookies, loginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TwoFactorRequest} [twoFactorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityManage2faPost(twoFactorRequest?: TwoFactorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TwoFactorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityManage2faPost(twoFactorRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityManageInfoGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityManageInfoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InfoRequest} [infoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityManageInfoPost(infoRequest?: InfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityManageInfoPost(infoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RefreshRequest} [refreshRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityRefreshPost(refreshRequest?: RefreshRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityRefreshPost(refreshRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityRegisterPost(registerRequest?: RegisterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityRegisterPost(registerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResendConfirmationEmailRequest} [resendConfirmationEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityResendConfirmationEmailPost(resendConfirmationEmailRequest?: ResendConfirmationEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityResendConfirmationEmailPost(resendConfirmationEmailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResetPasswordRequest} [resetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityResetPasswordPost(resetPasswordRequest?: ResetPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityResetPasswordPost(resetPasswordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [code] 
         * @param {string} [changedEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mapIdentityApiIdentityConfirmEmail(userId?: string, code?: string, changedEmail?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mapIdentityApiIdentityConfirmEmail(userId, code, changedEmail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IdentityApi - factory interface
 * @export
 */
export const IdentityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdentityApiFp(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordRequest} [forgotPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityForgotPasswordPost(forgotPasswordRequest?: ForgotPasswordRequest, options?: any): AxiosPromise<void> {
            return localVarFp.identityForgotPasswordPost(forgotPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [useCookies] 
         * @param {boolean} [useSessionCookies] 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityLoginPost(useCookies?: boolean, useSessionCookies?: boolean, loginRequest?: LoginRequest, options?: any): AxiosPromise<AccessTokenResponse> {
            return localVarFp.identityLoginPost(useCookies, useSessionCookies, loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TwoFactorRequest} [twoFactorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityManage2faPost(twoFactorRequest?: TwoFactorRequest, options?: any): AxiosPromise<TwoFactorResponse> {
            return localVarFp.identityManage2faPost(twoFactorRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityManageInfoGet(options?: any): AxiosPromise<InfoResponse> {
            return localVarFp.identityManageInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InfoRequest} [infoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityManageInfoPost(infoRequest?: InfoRequest, options?: any): AxiosPromise<InfoResponse> {
            return localVarFp.identityManageInfoPost(infoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RefreshRequest} [refreshRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityRefreshPost(refreshRequest?: RefreshRequest, options?: any): AxiosPromise<AccessTokenResponse> {
            return localVarFp.identityRefreshPost(refreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityRegisterPost(registerRequest?: RegisterRequest, options?: any): AxiosPromise<void> {
            return localVarFp.identityRegisterPost(registerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResendConfirmationEmailRequest} [resendConfirmationEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityResendConfirmationEmailPost(resendConfirmationEmailRequest?: ResendConfirmationEmailRequest, options?: any): AxiosPromise<void> {
            return localVarFp.identityResendConfirmationEmailPost(resendConfirmationEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordRequest} [resetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityResetPasswordPost(resetPasswordRequest?: ResetPasswordRequest, options?: any): AxiosPromise<void> {
            return localVarFp.identityResetPasswordPost(resetPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [code] 
         * @param {string} [changedEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapIdentityApiIdentityConfirmEmail(userId?: string, code?: string, changedEmail?: string, options?: any): AxiosPromise<void> {
            return localVarFp.mapIdentityApiIdentityConfirmEmail(userId, code, changedEmail, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for identityForgotPasswordPost operation in IdentityApi.
 * @export
 * @interface IdentityApiIdentityForgotPasswordPostRequest
 */
export interface IdentityApiIdentityForgotPasswordPostRequest {
    /**
     * 
     * @type {ForgotPasswordRequest}
     * @memberof IdentityApiIdentityForgotPasswordPost
     */
    readonly forgotPasswordRequest?: ForgotPasswordRequest
}

/**
 * Request parameters for identityLoginPost operation in IdentityApi.
 * @export
 * @interface IdentityApiIdentityLoginPostRequest
 */
export interface IdentityApiIdentityLoginPostRequest {
    /**
     * 
     * @type {boolean}
     * @memberof IdentityApiIdentityLoginPost
     */
    readonly useCookies?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof IdentityApiIdentityLoginPost
     */
    readonly useSessionCookies?: boolean

    /**
     * 
     * @type {LoginRequest}
     * @memberof IdentityApiIdentityLoginPost
     */
    readonly loginRequest?: LoginRequest
}

/**
 * Request parameters for identityManage2faPost operation in IdentityApi.
 * @export
 * @interface IdentityApiIdentityManage2faPostRequest
 */
export interface IdentityApiIdentityManage2faPostRequest {
    /**
     * 
     * @type {TwoFactorRequest}
     * @memberof IdentityApiIdentityManage2faPost
     */
    readonly twoFactorRequest?: TwoFactorRequest
}

/**
 * Request parameters for identityManageInfoPost operation in IdentityApi.
 * @export
 * @interface IdentityApiIdentityManageInfoPostRequest
 */
export interface IdentityApiIdentityManageInfoPostRequest {
    /**
     * 
     * @type {InfoRequest}
     * @memberof IdentityApiIdentityManageInfoPost
     */
    readonly infoRequest?: InfoRequest
}

/**
 * Request parameters for identityRefreshPost operation in IdentityApi.
 * @export
 * @interface IdentityApiIdentityRefreshPostRequest
 */
export interface IdentityApiIdentityRefreshPostRequest {
    /**
     * 
     * @type {RefreshRequest}
     * @memberof IdentityApiIdentityRefreshPost
     */
    readonly refreshRequest?: RefreshRequest
}

/**
 * Request parameters for identityRegisterPost operation in IdentityApi.
 * @export
 * @interface IdentityApiIdentityRegisterPostRequest
 */
export interface IdentityApiIdentityRegisterPostRequest {
    /**
     * 
     * @type {RegisterRequest}
     * @memberof IdentityApiIdentityRegisterPost
     */
    readonly registerRequest?: RegisterRequest
}

/**
 * Request parameters for identityResendConfirmationEmailPost operation in IdentityApi.
 * @export
 * @interface IdentityApiIdentityResendConfirmationEmailPostRequest
 */
export interface IdentityApiIdentityResendConfirmationEmailPostRequest {
    /**
     * 
     * @type {ResendConfirmationEmailRequest}
     * @memberof IdentityApiIdentityResendConfirmationEmailPost
     */
    readonly resendConfirmationEmailRequest?: ResendConfirmationEmailRequest
}

/**
 * Request parameters for identityResetPasswordPost operation in IdentityApi.
 * @export
 * @interface IdentityApiIdentityResetPasswordPostRequest
 */
export interface IdentityApiIdentityResetPasswordPostRequest {
    /**
     * 
     * @type {ResetPasswordRequest}
     * @memberof IdentityApiIdentityResetPasswordPost
     */
    readonly resetPasswordRequest?: ResetPasswordRequest
}

/**
 * Request parameters for mapIdentityApiIdentityConfirmEmail operation in IdentityApi.
 * @export
 * @interface IdentityApiMapIdentityApiIdentityConfirmEmailRequest
 */
export interface IdentityApiMapIdentityApiIdentityConfirmEmailRequest {
    /**
     * 
     * @type {string}
     * @memberof IdentityApiMapIdentityApiIdentityConfirmEmail
     */
    readonly userId?: string

    /**
     * 
     * @type {string}
     * @memberof IdentityApiMapIdentityApiIdentityConfirmEmail
     */
    readonly code?: string

    /**
     * 
     * @type {string}
     * @memberof IdentityApiMapIdentityApiIdentityConfirmEmail
     */
    readonly changedEmail?: string
}

/**
 * IdentityApi - object-oriented interface
 * @export
 * @class IdentityApi
 * @extends {BaseAPI}
 */
export class IdentityApi extends BaseAPI {
    /**
     * 
     * @param {IdentityApiIdentityForgotPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityForgotPasswordPost(requestParameters: IdentityApiIdentityForgotPasswordPostRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).identityForgotPasswordPost(requestParameters.forgotPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentityApiIdentityLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityLoginPost(requestParameters: IdentityApiIdentityLoginPostRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).identityLoginPost(requestParameters.useCookies, requestParameters.useSessionCookies, requestParameters.loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentityApiIdentityManage2faPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityManage2faPost(requestParameters: IdentityApiIdentityManage2faPostRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).identityManage2faPost(requestParameters.twoFactorRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityManageInfoGet(options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).identityManageInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentityApiIdentityManageInfoPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityManageInfoPost(requestParameters: IdentityApiIdentityManageInfoPostRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).identityManageInfoPost(requestParameters.infoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentityApiIdentityRefreshPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityRefreshPost(requestParameters: IdentityApiIdentityRefreshPostRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).identityRefreshPost(requestParameters.refreshRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentityApiIdentityRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityRegisterPost(requestParameters: IdentityApiIdentityRegisterPostRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).identityRegisterPost(requestParameters.registerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentityApiIdentityResendConfirmationEmailPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityResendConfirmationEmailPost(requestParameters: IdentityApiIdentityResendConfirmationEmailPostRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).identityResendConfirmationEmailPost(requestParameters.resendConfirmationEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentityApiIdentityResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityResetPasswordPost(requestParameters: IdentityApiIdentityResetPasswordPostRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).identityResetPasswordPost(requestParameters.resetPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentityApiMapIdentityApiIdentityConfirmEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public mapIdentityApiIdentityConfirmEmail(requestParameters: IdentityApiMapIdentityApiIdentityConfirmEmailRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).mapIdentityApiIdentityConfirmEmail(requestParameters.userId, requestParameters.code, requestParameters.changedEmail, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LotsApi - axios parameter creator
 * @export
 */
export const LotsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lotsIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('lotsIdDelete', 'id', id)
            const localVarPath = `/Lots/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lotsIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('lotsIdGet', 'id', id)
            const localVarPath = `/Lots/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateLotRequest} [updateLotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lotsIdPut: async (id: number, updateLotRequest?: UpdateLotRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('lotsIdPut', 'id', id)
            const localVarPath = `/Lots/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateLotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateLotRequest} [createLotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lotsPost: async (createLotRequest?: CreateLotRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Lots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createLotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LotsApi - functional programming interface
 * @export
 */
export const LotsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LotsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lotsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lotsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lotsIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LotDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lotsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateLotRequest} [updateLotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lotsIdPut(id: number, updateLotRequest?: UpdateLotRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LotDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lotsIdPut(id, updateLotRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateLotRequest} [createLotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lotsPost(createLotRequest?: CreateLotRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LotDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lotsPost(createLotRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LotsApi - factory interface
 * @export
 */
export const LotsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LotsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lotsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.lotsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lotsIdGet(id: number, options?: any): AxiosPromise<LotDto> {
            return localVarFp.lotsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateLotRequest} [updateLotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lotsIdPut(id: number, updateLotRequest?: UpdateLotRequest, options?: any): AxiosPromise<LotDto> {
            return localVarFp.lotsIdPut(id, updateLotRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateLotRequest} [createLotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lotsPost(createLotRequest?: CreateLotRequest, options?: any): AxiosPromise<LotDto> {
            return localVarFp.lotsPost(createLotRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for lotsIdDelete operation in LotsApi.
 * @export
 * @interface LotsApiLotsIdDeleteRequest
 */
export interface LotsApiLotsIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof LotsApiLotsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for lotsIdGet operation in LotsApi.
 * @export
 * @interface LotsApiLotsIdGetRequest
 */
export interface LotsApiLotsIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof LotsApiLotsIdGet
     */
    readonly id: number
}

/**
 * Request parameters for lotsIdPut operation in LotsApi.
 * @export
 * @interface LotsApiLotsIdPutRequest
 */
export interface LotsApiLotsIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof LotsApiLotsIdPut
     */
    readonly id: number

    /**
     * 
     * @type {UpdateLotRequest}
     * @memberof LotsApiLotsIdPut
     */
    readonly updateLotRequest?: UpdateLotRequest
}

/**
 * Request parameters for lotsPost operation in LotsApi.
 * @export
 * @interface LotsApiLotsPostRequest
 */
export interface LotsApiLotsPostRequest {
    /**
     * 
     * @type {CreateLotRequest}
     * @memberof LotsApiLotsPost
     */
    readonly createLotRequest?: CreateLotRequest
}

/**
 * LotsApi - object-oriented interface
 * @export
 * @class LotsApi
 * @extends {BaseAPI}
 */
export class LotsApi extends BaseAPI {
    /**
     * 
     * @param {LotsApiLotsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LotsApi
     */
    public lotsIdDelete(requestParameters: LotsApiLotsIdDeleteRequest, options?: AxiosRequestConfig) {
        return LotsApiFp(this.configuration).lotsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LotsApiLotsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LotsApi
     */
    public lotsIdGet(requestParameters: LotsApiLotsIdGetRequest, options?: AxiosRequestConfig) {
        return LotsApiFp(this.configuration).lotsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LotsApiLotsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LotsApi
     */
    public lotsIdPut(requestParameters: LotsApiLotsIdPutRequest, options?: AxiosRequestConfig) {
        return LotsApiFp(this.configuration).lotsIdPut(requestParameters.id, requestParameters.updateLotRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LotsApiLotsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LotsApi
     */
    public lotsPost(requestParameters: LotsApiLotsPostRequest = {}, options?: AxiosRequestConfig) {
        return LotsApiFp(this.configuration).lotsPost(requestParameters.createLotRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserWatchlistsApi - axios parameter creator
 * @export
 */
export const UserWatchlistsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userWatchlistsIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userWatchlistsIdDelete', 'id', id)
            const localVarPath = `/UserWatchlists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userWatchlistsIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userWatchlistsIdGet', 'id', id)
            const localVarPath = `/UserWatchlists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserWatchlistCommand} [createUserWatchlistCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userWatchlistsPost: async (createUserWatchlistCommand?: CreateUserWatchlistCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/UserWatchlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserWatchlistCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserWatchlistsApi - functional programming interface
 * @export
 */
export const UserWatchlistsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserWatchlistsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userWatchlistsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userWatchlistsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userWatchlistsIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserWatchlistDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userWatchlistsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateUserWatchlistCommand} [createUserWatchlistCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userWatchlistsPost(createUserWatchlistCommand?: CreateUserWatchlistCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserWatchlistDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userWatchlistsPost(createUserWatchlistCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserWatchlistsApi - factory interface
 * @export
 */
export const UserWatchlistsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserWatchlistsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userWatchlistsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.userWatchlistsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userWatchlistsIdGet(id: number, options?: any): AxiosPromise<UserWatchlistDto> {
            return localVarFp.userWatchlistsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserWatchlistCommand} [createUserWatchlistCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userWatchlistsPost(createUserWatchlistCommand?: CreateUserWatchlistCommand, options?: any): AxiosPromise<UserWatchlistDto> {
            return localVarFp.userWatchlistsPost(createUserWatchlistCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for userWatchlistsIdDelete operation in UserWatchlistsApi.
 * @export
 * @interface UserWatchlistsApiUserWatchlistsIdDeleteRequest
 */
export interface UserWatchlistsApiUserWatchlistsIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof UserWatchlistsApiUserWatchlistsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for userWatchlistsIdGet operation in UserWatchlistsApi.
 * @export
 * @interface UserWatchlistsApiUserWatchlistsIdGetRequest
 */
export interface UserWatchlistsApiUserWatchlistsIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UserWatchlistsApiUserWatchlistsIdGet
     */
    readonly id: number
}

/**
 * Request parameters for userWatchlistsPost operation in UserWatchlistsApi.
 * @export
 * @interface UserWatchlistsApiUserWatchlistsPostRequest
 */
export interface UserWatchlistsApiUserWatchlistsPostRequest {
    /**
     * 
     * @type {CreateUserWatchlistCommand}
     * @memberof UserWatchlistsApiUserWatchlistsPost
     */
    readonly createUserWatchlistCommand?: CreateUserWatchlistCommand
}

/**
 * UserWatchlistsApi - object-oriented interface
 * @export
 * @class UserWatchlistsApi
 * @extends {BaseAPI}
 */
export class UserWatchlistsApi extends BaseAPI {
    /**
     * 
     * @param {UserWatchlistsApiUserWatchlistsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserWatchlistsApi
     */
    public userWatchlistsIdDelete(requestParameters: UserWatchlistsApiUserWatchlistsIdDeleteRequest, options?: AxiosRequestConfig) {
        return UserWatchlistsApiFp(this.configuration).userWatchlistsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserWatchlistsApiUserWatchlistsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserWatchlistsApi
     */
    public userWatchlistsIdGet(requestParameters: UserWatchlistsApiUserWatchlistsIdGetRequest, options?: AxiosRequestConfig) {
        return UserWatchlistsApiFp(this.configuration).userWatchlistsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserWatchlistsApiUserWatchlistsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserWatchlistsApi
     */
    public userWatchlistsPost(requestParameters: UserWatchlistsApiUserWatchlistsPostRequest = {}, options?: AxiosRequestConfig) {
        return UserWatchlistsApiFp(this.configuration).userWatchlistsPost(requestParameters.createUserWatchlistCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddUserBalanceRequest} [addUserBalanceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCurrentUserAddBalancePost: async (addUserBalanceRequest?: AddUserBalanceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Users/current_user/add-balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addUserBalanceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCurrentUserGet: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Users/current_user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdDelete', 'id', id)
            const localVarPath = `/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdGet', 'id', id)
            const localVarPath = `/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut: async (id: number, updateUserRequest?: UpdateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdPut', 'id', id)
            const localVarPath = `/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddUserBalanceRequest} [addUserBalanceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersCurrentUserAddBalancePost(addUserBalanceRequest?: AddUserBalanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersCurrentUserAddBalancePost(addUserBalanceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersCurrentUserGet(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersCurrentUserGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdPut(id: number, updateUserRequest?: UpdateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdPut(id, updateUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {AddUserBalanceRequest} [addUserBalanceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCurrentUserAddBalancePost(addUserBalanceRequest?: AddUserBalanceRequest, options?: any): AxiosPromise<void> {
            return localVarFp.usersCurrentUserAddBalancePost(addUserBalanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCurrentUserGet(id?: number, options?: any): AxiosPromise<UserDto> {
            return localVarFp.usersCurrentUserGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.usersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(id: number, options?: any): AxiosPromise<UserDto> {
            return localVarFp.usersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut(id: number, updateUserRequest?: UpdateUserRequest, options?: any): AxiosPromise<UserDto> {
            return localVarFp.usersIdPut(id, updateUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for usersCurrentUserAddBalancePost operation in UsersApi.
 * @export
 * @interface UsersApiUsersCurrentUserAddBalancePostRequest
 */
export interface UsersApiUsersCurrentUserAddBalancePostRequest {
    /**
     * 
     * @type {AddUserBalanceRequest}
     * @memberof UsersApiUsersCurrentUserAddBalancePost
     */
    readonly addUserBalanceRequest?: AddUserBalanceRequest
}

/**
 * Request parameters for usersCurrentUserGet operation in UsersApi.
 * @export
 * @interface UsersApiUsersCurrentUserGetRequest
 */
export interface UsersApiUsersCurrentUserGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiUsersCurrentUserGet
     */
    readonly id?: number
}

/**
 * Request parameters for usersIdDelete operation in UsersApi.
 * @export
 * @interface UsersApiUsersIdDeleteRequest
 */
export interface UsersApiUsersIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiUsersIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for usersIdGet operation in UsersApi.
 * @export
 * @interface UsersApiUsersIdGetRequest
 */
export interface UsersApiUsersIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiUsersIdGet
     */
    readonly id: number
}

/**
 * Request parameters for usersIdPut operation in UsersApi.
 * @export
 * @interface UsersApiUsersIdPutRequest
 */
export interface UsersApiUsersIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiUsersIdPut
     */
    readonly id: number

    /**
     * 
     * @type {UpdateUserRequest}
     * @memberof UsersApiUsersIdPut
     */
    readonly updateUserRequest?: UpdateUserRequest
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {UsersApiUsersCurrentUserAddBalancePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersCurrentUserAddBalancePost(requestParameters: UsersApiUsersCurrentUserAddBalancePostRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersCurrentUserAddBalancePost(requestParameters.addUserBalanceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUsersCurrentUserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersCurrentUserGet(requestParameters: UsersApiUsersCurrentUserGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersCurrentUserGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUsersIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdDelete(requestParameters: UsersApiUsersIdDeleteRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdGet(requestParameters: UsersApiUsersIdGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUsersIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdPut(requestParameters: UsersApiUsersIdPutRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersIdPut(requestParameters.id, requestParameters.updateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


